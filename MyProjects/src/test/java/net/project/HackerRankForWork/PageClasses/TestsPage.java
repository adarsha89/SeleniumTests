package net.project.HackerRankForWork.PageClasses;

import java.util.List;

import net.project.loggers.AppLogger;
import net.project.webDriverUtils.WebDriverUtilFunctions;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.CacheLookup;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.How;
import org.openqa.selenium.support.ui.LoadableComponent;

public class TestsPage extends LoadableComponent<TestsPage> implements CommonPageInterface{

	/** The url. */
	public  String url="https://www.hackerrank.com/x/tests";
	
	
	
	/** The web driver. */
	public  WebDriver webDriver;
	
	/** The web driver util functions. */
	public WebDriverUtilFunctions webDriverUtilFunctions;
	
	@FindBy(how=How.CSS , using="a[id='new-test-popup-link']")
	@CacheLookup	
	public WebElement newTestButton;
	
	@FindBy(how=How.CSS , using="a[href='interviews']")
	@CacheLookup	
	public WebElement codePairLink;
	
	@FindBy(how=How.CSS , using="input[id='test-search-input']")
	@CacheLookup	
	public WebElement testSearchInput;
	
	@FindBy(how=How.CSS , using="a[class='js-backbone hre-sidebar-link']")
	@CacheLookup	
	public List<WebElement> sideBarLinks;
	
	@FindBy(how=How.CSS , using="form[name='new-test-form']")
	@CacheLookup	
	public WebElement newTestForm;
	
	@FindBy(how=How.CSS , using="input[id='new-test-name']")
	@CacheLookup	
	public WebElement newTestNameInput;
	
	@FindBy(how=How.CSS , using="input[id='new-test-duration']")
	@CacheLookup	
	public WebElement newTestDurationInput;
	
	@FindBy(how=How.CSS , using="button[type='submit']")
	@CacheLookup	
	public WebElement createTestButton;
	
	@FindBy(how=How.CSS , using="a[id='wizard-modal-link']")
	@CacheLookup	
	public WebElement launchWizardButton;
	
	@FindBy(how=How.CSS , using="div[class*='wizard-modal']")
	@CacheLookup	
	public WebElement autoGeneratedTestCreationWizard;
	
	@FindBy(how=How.CSS , using="div[class*='wizard-modal']>ul>li>a[id='csharp-test']")
	@CacheLookup	
	public WebElement autoGeneratedCSharpTest;
	
	@FindBy(how=How.CSS , using="div[class*='wizard-modal']>ul>li>a[id='java-test']")
	@CacheLookup	
	public WebElement autoGeneratedJavaTest;
	
	@FindBy(how=How.CSS , using="div[class*='wizard-modal']>ul>li>a[id='cpp-test']")
	@CacheLookup	
	public WebElement autoGeneratedCPPTest;
	
	
	@FindBy(how=How.CSS , using="ul[id='tests-container']>li[class='tests-list-item']")
	@CacheLookup	
	public List<WebElement> testItems;
	
	@FindBy(how=How.CSS , using="a[class*='showAdvanceSearch']")
	@CacheLookup	
	public WebElement moreSearchFiltersLink;
	
	@FindBy(how=How.CSS , using="div[class='test-options-wrapper']")
	@CacheLookup	
	public WebElement testOptionsWrapper;
	
	@FindBy(how=How.CSS , using="a[class*='test_name']")
	@CacheLookup	
	public List<WebElement> testLinks;
	
	@FindBy(how=How.CSS , using="a[data-event-action='invite link']")
	@CacheLookup	
	public List<WebElement> testInviteLinks;
	
	
	@FindBy(how=How.CSS , using="a[data-event-action='all reports link']")
	@CacheLookup	
	public List<WebElement> allReportsLinks;
			
			
	
	@FindBy(how=How.CSS , using="a[class='btn btn-primary btn-mid js-backbone js-addfromlib tip']")
	@CacheLookup	
	public WebElement addFromLibraryButton;

	
	public TestsPage(WebDriver webDriver) {
		// TODO Auto-generated constructor stub
		this.webDriver=webDriver;	
		this.webDriverUtilFunctions=new WebDriverUtilFunctions();		

		
		}
	@Override
	protected void isLoaded() throws Error {
		// TODO Auto-generated method stub
		waitForPageRender(webDriver,1);
		AppLogger.assertLogEquals(webDriverUtilFunctions.getCurrentUrl(webDriver),url,"Tests page is not loaded");
		
	}

	@Override
	protected void load() {
		// TODO Auto-generated method stub
		
	}

	public MyPadsPage goToCodePairPage()
	{
		MyPadsPage myPadsPage =(MyPadsPage)webDriverUtilFunctions.instantiatePage(webDriver, "net.project.HackerRankForWork.PageClasses.MyPadsPage");
		webDriverUtilFunctions.click(codePairLink);
		myPadsPage.isLoaded();
		return myPadsPage;		
	}
	public void goToTestSetupPageUsingSearchAndTestName(String testName)
	{
		webDriverUtilFunctions.typeKeys(testSearchInput,testName); 
		
	}
	public void goToTestSetupPageUsingTestName(String testName)
	{
		 for(WebElement webElement : testLinks)
		 {
			if( webElement.getText().equals(testName))
				webDriverUtilFunctions.click(webElement);
		 }
		
	}
	public void goToTestSetupPageUsingIndexOfTheTestsDisplayed(Integer testIndex)
	{
		webDriverUtilFunctions.click(testLinks.get(testIndex));

		
	}
	
	
	
	
}
